---
import Layout from "../layouts/Layout.astro";
import dataJson from "../../data.json";
import Socials from "../components/Socials.astro";
import Theme from "../components/Theme.astro";
import ProjectsGrid from "../components/ProjectsGrid.astro";
import { IoIosArrowRoundForward } from "react-icons/io";
import { FaMapPin } from "react-icons/fa6";
import Skills from "../components/Skills.astro";
import Acheivements from "../components/Acheivements.astro";
import type { GitHubQueryResponse, Repository } from "../../typings/github";
import Experience from "../components/linkedin/Experience.astro";


const filterRepositories = (repositories: Repository[]) => {
  const excludedRepos = ["valentinee"];
  return repositories.filter(repo => !excludedRepos.includes(repo.name));
};

const graph = await fetch("https://api.github.com/graphql", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "Cache-Control": "private; stale-while-revalidate=3600",
    Authorization: `Bearer ${import.meta.env.GITHUB_TOKEN}`,
  },
  body: JSON.stringify({
    query: `
    query {
      user(login: "${dataJson.github.replace("https://github.com/", "")}") {
        
        name
        bio
        socialAccounts(first: 5) {
          nodes {
            provider
			      displayName
            url
          }
        }
          
        contributionsCollection {
      totalCommitContributions
      totalPullRequestContributions
      totalIssueContributions
      contributionCalendar {
        totalContributions
      }
      totalRepositoriesWithContributedCommits
    }
      issues {
      totalCount
    }
    pullRequests {
      totalCount
    }
    followers {
      totalCount
    }

        repositories(first: 100, orderBy: { field: STARGAZERS, direction: DESC }) {
        edges {
        node {
          languages(first: 10) {
            totalSize
            edges {
              size
              node {
                name
                color
              }
            }
          }
  }
  }
      nodes {
        name
        stargazerCount 
        stargazers {
        totalCount
        }
        openGraphImageUrl
        forkCount
        updatedAt
        url
        description
      }
    }
      }
    }
  `,
    variables: {},
  }),
});

const data: GitHubQueryResponse = await graph.json();
---

<Layout title={dataJson.name}>
  <main class="lg:p-6">
    <h1
      onclick="window.scrollTo({ top:0, behavior: 'smooth' })"
      class="my-2 font-bold text-4xl bg-background px-2 py-1 min-w-[280px] rounded-lg lg:sticky lg:top-12 w-fit z-10 -m-2"
    >
      {dataJson.name}
    </h1>
    <Theme />
    <p class="font-regular text-lg">
      {dataJson.biography || data?.data?.user?.bio}
    </p>

    <div class="my-4">
      <Socials
        nodes={data?.data?.user?.socialAccounts?.nodes || []}
        github={dataJson.github.replace("https://github.com/", "")}
      />
    </div>

    <hr class="border-border border-opacity-30" />

    <div class="flex pt-12 lg:flex-row flex-col min-h-screen w-full gap-12">
      <aside
        id="sidebar"
        class="min-w-[300px] justify-between lg:flex h-[90vh] flex-col items-start hidden border-r sticky top-12 border-border border-opacity-30"
      >
        <div class="w-full">
          <h2 class="text-3xl font-semibold my-2 mb-6">Summary</h2>
          <nav
            id="sidebar-links"
            class="flex flex-col gap-4 w-full items-start justify-start"
          >
          </nav>
        </div>
        <div class="flex flex-col gap-5">
          <div class="flex items-center gap-2">
            <FaMapPin size={16} />
            <span class="text-lg">{dataJson.location}</span>
          </div>
          {dataJson.resume && (
            <a
              href="/resume.pdf"
              download
              class="bg-background w-fit text-color hover:bg-color hover:text-background px-4 py-2 font-semibold border border-color"
            >
              Resume
            </a>
          )}
        </div>
      </aside>

      <div class="flex flex-col gap-32">
        <section id="projects" class="min-h-screen">
          <div class="flex items-center justify-between mb-4">
            <a
              href=`${dataJson.github}?tab=repositories`
              class="flex items-center cursor-pointer gap-4 hover:gap-8 transition-all duration-100 flex-row"
            >
              <h2
                class="text-3xl font-semibold my-2 bg-background px-2 py-1 rounded-lg w-fit z-10 -m-2"
              >
                Projects
              </h2>
              <IoIosArrowRoundForward size={26} />
            </a>
            <button
              id="toggle-projects"
              class="bg-background text-color hover:bg-color hover:text-background px-4 py-2 font-semibold border border-color rounded-lg"
            >
              Show All Projects
            </button>
          </div>

          <ProjectsGrid
            repositories={filterRepositories(data.data.user?.repositories?.nodes || [])}
            initialDisplayCount={9}
          />
        </section>
        {dataJson.experience && dataJson.experience.length > 0 && (
          <section id="experience" class="min-h-[50vh]">
            <h2
              class="text-3xl font-semibold my-2 bg-background px-2 py-1 rounded-lg w-fit z-10 -m-2"
            >
              Experience
            </h2>

            <Experience experience={dataJson.experience} />
          </section>
        )}

        {dataJson.skills && Object.keys(dataJson.skills).length > 0 && (
          <section id="skills">
            <h2
              class="text-3xl font-semibold my-2 bg-background px-2 py-1 rounded-lg w-fit z-10 -m-2"
            >
              Skills
            </h2>

            <Skills />
          </section>
        )}

        {dataJson.acheivements && dataJson.acheivements.length > 0 && (
          <section id="achievements">
            <h2
              class="text-3xl font-semibold my-2 bg-background px-2 py-1 rounded-lg w-fit z-10 -m-2"
            >
              Achievements
            </h2>

            <Acheivements />
          </section>
        )}

        <section id="contact" class="min-h-[30vh] mb-12">
          <h2
            class="text-3xl font-semibold my-2 bg-background px-2 py-1 rounded-lg w-fit z-10 -m-2"
          >
            Contact
          </h2>
          
          <div class="mt-8 flex flex-col gap-6">
            <p class="text-lg opacity-90">
              Feel free to reach out for collaborations, opportunities, or just to say hello!
            </p>
            
            <div class="flex flex-col gap-6">

              <Socials
                contact
                nodes={data?.data?.user?.socialAccounts?.nodes || []}
                github={dataJson.github.replace("https://github.com/", "")}
              />

              {dataJson.resume && (
                <a
                  href="/resume.pdf"
                  download
                  class="bg-background w-fit text-color hover:bg-color hover:text-background px-4 py-2 font-semibold border border-color"
                >
                  Resume
                </a>
              )}
            </div>
          </div>
        </section>

      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sidebarLinksContainer = document.getElementById("sidebar-links");

    document.querySelectorAll("section").forEach((section) => {
      const sectionId = section.id;
      const sectionTitle = section.querySelector("h2")?.innerText;

      const navItem = document.createElement("div");
      navItem.className = "flex gap-4 w-full items-center group justify-start";

      // First, update the progressBar creation to include better transition properties
      const progressBar = document.createElement("div");
      progressBar.className =
        "progress-bar bg-color rounded-3xl h-0.5 transition-all duration-300 ease-out group-hover:w-[20%] hover:!w-[20%] w-[15%] cursor-pointer";
      progressBar.style.opacity = "0.3";

      const navText = document.createElement("p");
      navText.className =
        "text-lg font-medium transition-all duration-100 hover:underline cursor-pointer";
      navText.textContent = sectionTitle ?? "";

      navItem.appendChild(progressBar);
      navItem.appendChild(navText);
      sidebarLinksContainer?.appendChild(navItem);

      navItem.addEventListener("click", () => {
        document
          .getElementById(sectionId)
          ?.scrollIntoView({ behavior: "smooth" });
      });
    });

    const options = {
      root: null,
      rootMargin: "-20% 0px -20% 0px", // Add margin to improve trigger area
      threshold: [0, 0.25, 0.5, 0.75, 1], // Multiple thresholds for smoother transitions
    };

    const observer = new IntersectionObserver((entries) => {
      if (!sidebarLinksContainer) return;

      entries.forEach((entry) => {
        const sectionTitle = entry.target.querySelector("h2")?.innerText.trim();
        const navItem = Array.from(sidebarLinksContainer.children).find(
          (item) => item.textContent?.trim() === sectionTitle,
        );

        if (navItem) {
          const progressBar: HTMLElement | null =
            navItem.querySelector(".progress-bar");
          if (progressBar) {
            if (entry.isIntersecting) {
              // Calculate progress based on intersection ratio
              const progress = Math.min(entry.intersectionRatio * 100, 50);
              progressBar.style.width = `${progress}%`;
              progressBar.style.opacity = `${0.3 + entry.intersectionRatio * 0.3}`;
            } else {
              progressBar.style.width = "15%";
              progressBar.style.opacity = "0.3";
            }
          }
        }
      });
    }, options);

    document.querySelectorAll("section").forEach((section) => {
      observer.observe(section);
    });

    // Replace the updateProgressBars function with this improved version
    function updateProgressBars() {
      const sections = document.querySelectorAll("section");
      const viewportHeight = window.innerHeight;

      requestAnimationFrame(() => {
        sections.forEach((section) => {
          const sectionTitle = section.querySelector("h2")?.innerText.trim();
          const navItem = Array.from(
            sidebarLinksContainer?.children || [],
          ).find((item) => item.textContent?.trim() === sectionTitle);

          if (navItem) {
            const progressBar = navItem.querySelector(
              ".progress-bar",
            ) as HTMLElement;
            const sectionRect = section.getBoundingClientRect();
            const distanceFromViewport = sectionRect.top;

            const viewportCenter = viewportHeight / 2;
            const distance = Math.abs(distanceFromViewport - viewportCenter);
            const maxDistance = viewportHeight * 0.8; // Reduced max distance for better sensitivity
            const progress = Math.max(0, 1 - distance / maxDistance);

            // Smoother thresholds
            const width = progress > 0.8 ? 50 : 15 + progress * 35;
            const opacity = progress > 0.8 ? 1 : 0.3 + progress * 0.7;

            progressBar.style.setProperty("width", `${width}%`);
            progressBar.style.setProperty("opacity", `${opacity}`);
          }
        });
      });
    }

    // Throttle the scroll event for better performance
    let ticking = false;
    window.addEventListener("scroll", () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateProgressBars();
          ticking = false;
        });
        ticking = true;
      }
    });
    // Initial update
    updateProgressBars();
  });
</script>
